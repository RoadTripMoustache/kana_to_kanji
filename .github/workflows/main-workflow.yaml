name: Main workflow
on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - '.metadata'
      - 'README.md'
      - '.github/**'
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  contents: write

jobs:
  get_version:
    name: Retrieve version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.split.outputs._0 }}
    steps:
      - uses: actions/checkout@v4
      - name: Get the version from the pubspec
        id: pubspecVersion
        uses: CumulusDS/get-yaml-paths-action@v1.0.2
        with:
          file: pubspec.yaml
          version: version
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: ${{ steps.pubspecVersion.outputs.version }}
          separator: '+'

  tests:
    name: Tests & checks
    runs-on: ubuntu-latest
    steps:
      #### SETUP ####
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - run: flutter doctor
      - name: Get dependencies
        run: |
          # Add flutter_rtm private key to the ssh-agent so we can access the depedency
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.FLUTTER_RTM_PRIVATE_KEY }}'
          
          flutter pub get
      - name: Setup .env
        run: cp .env.template .env
      - name: Generate files
        run: |
          flutter pub run build_runner build
          flutter pub get # Temporary until https://github.com/flutter/flutter/issues/148333 is solved

      ### CHECKS ###
      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test --coverage

  build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    needs:
      - tests
      - get_version
    environment: beta
    env:
      VERSION: ${{ needs.get_version.outputs.version }}
      FLAVOR: beta
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        target:
          - ios
          - android
        include:
          - target: ios
            os: macos-latest
            build_target: ios
            build_args: --no-codesign
            build_path: build/ios/iphoneos
            asset_extension: zip
            asset_content_type: application/zip
          - target: android
            os: ubuntu-latest
            build_target: apk
            build_args: --split-per-abi
            build_path: build/app/outputs/flutter-apk
            asset_extension: apk
            asset_content_type: application/zip
    steps:
      #### SETUP ####
      - uses: actions/checkout@v4
      - name: Install Android dependencies
        if: matrix.target == 'Android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - run: flutter doctor
      - name: Install Firebase dependencies
        run: |
          npm install -g firebase-tools
          dart pub global activate flutterfire_cli 1.0.1-dev.0 --overwrite
      - name: Generate Firebase files
        run: |
          flutterfire configure --project=${{ vars.FIREBASE_PROJECT_ID }} --yes \
              --token=${{ secrets.FIREBASE_TOKEN }} \
              --out=lib/firebase_options.dart \
              --platforms=${{ matrix.target }} \
              ${{ matrix.target == 'Android' && format('--android-package-name={0}', vars.ANDROID_PACKAGE_NAME) || '' }} \
              ${{ matrix.target == 'iOS' && format('--ios-bundle-id={0}', vars.IOS_BUNDLE_ID) || '' }}
      - name: Setup .env
        run: |
          echo -e "${{ vars.CONFIGURATION }}" >> .env
          echo -e "\n${{ secrets.CONFIGURATION }}" >> .env
      - name: Get dependencies
        run: flutter pub get
      - name: Generate files
        run: |
          flutter pub run build_runner build
          flutter pub get # Temporary until https://github.com/flutter/flutter/issues/148333 is solved

      #### BUILD ####
      - name: Build the application
        run: flutter build -v ${{ matrix.build_target }} ${{ matrix.build_args }} --flavor ${{ env.FLAVOR }} --release

      #### COMPRESS & UPLOAD ####
      - name: Rename Android build
        if: matrix.target == 'Android'
        run: |
          sudo apt-get install rename
          rename 's/app-(.+)-(.*)-release.apk/${{ vars.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}_$1.${{ matrix.asset_extension }}/' *.apk
          mv *.apk ${{ github.workspace }}/
        working-directory: ${{ matrix.build_path }}

      - name: Compress iOS build
        if: matrix.target == 'iOS'
        run: |
          ditto -c -k --sequesterRsrc --keepParent ${{ vars.IOS_APP_NAME }}.app ${{ github.workspace }}/${{ vars.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}.${{ matrix.asset_extension }}
        working-directory: ${{ matrix.build_path }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: "${{ github.workspace }}/${{ vars.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}*.${{ matrix.asset_extension }}"
  create_pre_release:
    name: Create GitHub release
    needs:
      - get_version
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download build of Android and iOS
        uses: actions/download-artifact@v4
        with:
          path: build
      - name: Create pre-release
        run: |
          gh release create ${{ needs.get_version.outputs.version }} */** --title v${{ needs.get_version.outputs.version }} -R '${{ github.repository }}' --prerelease --generate-notes
        working-directory: build
